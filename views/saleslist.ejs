<%-include('header')%>
<style>
  #myForm {
      display: none; /* Initially hide the form */
      margin-top: 20px;
      padding: 20px;
      border: 1px solid #ccc;
      border-radius: 5px;
  }
</style>
<div class="container-fluid">
  

  <div id="modalForm">
    <form action="/updpayment" method="post">
      <div class="form-container">
          <h2>Update Payment</h2>
          <input class="float-end" hidden type="text" id="pd" name="pd" placeholder="" readonly required>
          <input class="float-end" type="text" id="bil" name="bil" placeholder="" readonly required>
          <label class="form-label"  for="ur">Payble Amount</label>
          <input type="text" id="ur" name="ur"readonly placeholder="" required>
          <label class="form-label"  for="urm">Payment</label>
          <input type="text" id="urm" name="urm" placeholder="Payment" required>
          
          <button class="mb-1" type="submit" id="submitButton">Submit</button>
          <button id="closeButton">Close</button>
      </div>
    </form>
  </div>
  <button id="toggleButton">Filter Date</button>

  <div class="row">
      
      <div class="col-lg-12 col-sm-12 col-sm-12 d-flex align-items-stretch">
        <div class="card w-100">
          <div id="myForm" class="col-lg-8">
            <div class="row">
              <div class="col-auto">
            <label for="startDate">Start Date:</label>
            <input class="form-control " type="datetime-local" name="startDate" id="startDate" required>
          </div>
          <div class="col-auto">
            <label for="endDate">End Date:</label>
            <input class="form-control" type="datetime-local" name="endDate" id="endDate" required></div>
            <div class="col-auto">
            <button id="fil" onclick="filterdate();" class="btn fil float-end mt-3 btn-dark">Filter</button></div>
          </div>
          </div>
          <div class="card-body p-4">
            
            <h5 class="card-title fw-semibold mb-4">Sale List</h5>

            <div class="table-responsive">
              
                
              <input type="text" onkeyup="myFunctionsl()" class="float-end"  name="search" id="search" placeholder="Search">
              <div class="mb-3 form-check mx-3 float-end">
                <input type="checkbox" onclick="debtorchk()" class="form-check-input filter" id="exampleCheck1">
                <label class="form-check-label" for="exampleCheck1">Debtors</label>
              </div>
              <table class="table text-nowrap mb-0 align-middle" id="myTable">
                <thead class="text-dark fs-4">
                  <tr>
                    
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">Date</h6>
                    </th>
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">Bill No</h6>
                    </th>
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">Name</h6>
                    </th>
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">Currency</h6>
                    </th>
                    <th class="border-bottom-0">
                        <h6 class="fw-semibold mb-0">Tatal</h6>
                      </th>
                      <th class="border-bottom-0">
                        <h6 class="fw-semibold mb-0">Discount</h6>
                      </th>
                      <th class="border-bottom-0">
                        <h6 class="fw-semibold mb-0">Paid</h6>
                      </th>
                      <th class="border-bottom-0">
                        <h6 class="fw-semibold mb-0">Remain</h6>
                      </th>
                    <th class="border-bottom-0">
                      <h6 class="fw-semibold mb-0">Action</h6>
                    </th>
                  </tr>
                </thead>
                <tbody id="dt">
                      <% bb.forEach(function(p){%>
                  <tr>
                    
                    <td class="border-bottom-0">
                      <p class="fw-semibold mb-0"><%=p.createdAt.toString().split(' GMT')[0] %></p>
                    </td>
                    <td class="border-bottom-0">
                      <p class="fw-semibold mb-0"><%=p.billno %></p>
                    </td>
                    <td class="border-bottom-0">
                      <p class="fw-semibold mb-0"><%=p.customern %></p>
                    </td>
                    <td class="border-bottom-0">
                      <p class="fw-semibold mb-0"><%=p.currency %></p>
                    </td>
                    <td class="border-bottom-0">
                      <span class="badge bg-primary rounded-3 fw-semibold"><%=p.Total %></span>
                      </td>
                      <td class="border-bottom-0">
                        <span class="badge bg-secondary rounded-3 fw-semibold"><%=p.discount %></span>
                        </td>
                      <td class="border-bottom-0">
                        <span class="badge bg-success rounded-3 fw-semibold"><%=p.Paid %></span>
                      </td>
                      <td class="border-bottom-0">
                        <span class="badge bg-danger rounded-3 fw-semibold"><%=p.remain %></span>
                      </td>
                    <td class="border-bottom-0">
                      <a onclick="dell()" id="openFormButton" class="btn del btn-sm"
                        style="background-color: rgba(23, 83, 224, 0.918); color: rgb(241, 241, 241);">
                        Payment</a>
                    </td>
                  </tr>
                <% })%>
                  
                              
                </tbody>
                <tfoot>
                  <tr>
                      <td colspan="4" style="font-weight: bolder; text-align: center;">Grand Total</td>
                      <td id="tgt" style="font-weight: bolder;">0</td>
                      <td id="tdis"style="font-weight: bolder;">0</td>
                      <td id="tpd"style="font-weight: bolder;">0</td>
                      <td id="trm"style="font-weight: bolder;">0</td>
                  </tr>
              </tfoot>
                
              </table>
              
            </div>
            <div class="pagination" id="pagination-controls">
              <button id="prev" onclick="changePage(-1)">Previous</button>
              <!-- Page numbers will be generated here -->
              <button id="next" onclick="changePage(1)">Next</button>
          </div>
          </div>
        </div>
      </div>
      
  </div>
  
  
</div>
<script>
  
  const modalForm = document.getElementById('modalForm');
        const openFormButton = document.getElementById('openFormButton');
        const rem = document.getElementById('ur');
        const pd = document.getElementById('pd');
        function openModal(rem,bill,pad) {
            ur.value = rem; // Populate name input
            bil.value = bill;
            pd.value = pad;
            modalForm.style.display = 'flex'; // Show modal
        }
        document.querySelectorAll('.del').forEach(button => {
            button.addEventListener('click', (event) => {
                const row = event.target.closest('tr'); // Get the closest row
                const rem = row.cells[7].innerText; // Get name from first cell
                const bill = row.cells[1].innerText;
                const pd = row.cells[6].innerText;
                openModal(rem,bill,pd); // Open modal with data
            });
        });
        openFormButton.addEventListener('click', () => {
            modalForm.style.display = 'flex'; // Show the modal
        });

        // Handle form submission
        document.getElementById('submitButton').addEventListener('click', () => {
            // You can handle form data here
            alert('Form submitted!');
            modalForm.style.display = 'none'; // Hide the modal after submission
        });

        // Handle close button
        document.getElementById('closeButton').addEventListener('click', () => {
            modalForm.style.display = 'none'; // Hide the modal
        });
        const toggleButton = document.getElementById('toggleButton');
        const myForm = document.getElementById('myForm');

        function debtorchk(){
        $('.filter').on('change', function() {
        const showGreaterThanZero = $(this).is(':checked');

                $('#myTable tbody tr').each(function() {
                    // Get the price from the third <td> (which is the Price column)
                    const price = parseFloat($(this).find('td:nth-child(8)').text());

                    // Show or hide the row based on the checkbox state and price
                    if (showGreaterThanZero) {
                        $(this).toggle(price > 0);
                        sumpayment()
                    } else {
                        $(this).show(); // Show all if checkbox is unchecked

                        sumpayment()
                    }
                });
        });
        
}
function sumpayment(){
  
    let tgt = 0;
    let tpd = 0;
    let trm = 0;
    let tdis = 0;

                // Iterate over each <td> in the Score column (third column)
                $('#myTable tbody tr:visible').each(function() {
                    // Get the value from the third <td> (index 2)
                    let score = parseFloat($(this).find('td:nth-child(5)').text());
                    let score1 = parseFloat($(this).find('td:nth-child(6)').text());
                    let score2 = parseFloat($(this).find('td:nth-child(7)').text());
                    let score3 = parseFloat($(this).find('td:nth-child(8)').text());

                    // Add the score to the total
                    if (!isNaN(score)) {
                        tgt += score;
                    }
                    if (!isNaN(score1)) {
                        tdis += score1;
                    }if (!isNaN(score2)) {
                        tpd += score2;
                    }if (!isNaN(score3)) {
                        trm += score3;
                    }
                });

                // Display the total in the footer
                $('#tgt').text(tgt);
                $('#tdis').text(tdis);
                $('#tpd').text(tpd);
                $('#trm').text(trm);
           
}
const rowsPerPage = 30; // Number of rows per page
    let currentPage = 1;

    function displayTable(page) {
        const rows = document.querySelectorAll("#myTable tbody tr");
        const totalRows = rows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);
        
        // Calculate start and end indices for current page
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;

        // Hide all rows and only show the selected page's rows
        rows.forEach((row, index) => {
            row.style.display = (index >= start && index < end) ? '' : 'none';
        });

        // Update row count

        // Enable/disable Previous and Next buttons
        document.getElementById("prev").disabled = page === 1;
        document.getElementById("next").disabled = page === totalPages;

        // Generate page numbers
        generatePaginationControls(totalPages, page);
    }

    function generatePaginationControls(totalPages, activePage) {
        const paginationControls = document.getElementById("pagination-controls");

        // Clear previous page numbers
        const pageNumbers = paginationControls.querySelectorAll("span");
        pageNumbers.forEach(span => span.remove());

        // Determine the range of page numbers to display
        const maxPageNumbers = 10; // Maximum number of page numbers to display
        let startPage, endPage;

        if (totalPages <= maxPageNumbers) {
            // If total pages are less than or equal to max, show all
            startPage = 1;
            endPage = totalPages;
        } else {
            // Calculate start and end page numbers to show
            startPage = Math.max(1, activePage - Math.floor(maxPageNumbers / 2));
            endPage = Math.min(totalPages, startPage + maxPageNumbers - 1);

            // Adjust startPage if endPage exceeds totalPages
            if (endPage === totalPages) {
                startPage = Math.max(1, totalPages - maxPageNumbers + 1);
            }
        }

        // Generate page numbers
        for (let i = startPage; i <= endPage; i++) {
            const span = document.createElement("span");
            span.textContent = i;
            span.className = (i === activePage) ? 'active' : '';
            span.onclick = () => displayTable(i);
            paginationControls.insertBefore(span, document.getElementById("next"));
        }
    }

    function changePage(direction) {
        const totalRows = document.querySelectorAll("#myTable tbody tr").length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);
        currentPage += direction;

        // Ensure currentPage stays within bounds
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        displayTable(currentPage);
    }

    // Initial display
    displayTable(currentPage);
</script>
<%-include('footer')%>