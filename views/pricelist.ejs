<%-include('header')%>

  <div class="container-fluid">

    <div id="modalForm">
      <form action="/updpri" method="post">
        <div class="form-container">
            <h2>Update Payment</h2>
            <input class="float-end"  hidden type="text" id="id" name="id" placeholder="" readonly required>
            
            <label class="form-label"  for="ur">Item Name</label>
            <input type="text" id="ur" name="ur"readonly placeholder="" required>
            <label class="form-label" for="basic-default-sc">Select Currency</label>
            <select id="sc" name="sc" class="sc form-select" required>
            <option value="" disabled >Currency</option>
            <option value="Afg" selected>Afghani</option>
            <option value="Usd">Dollar</option>
            
          </select>
            <label class="form-label"  for="urm">Price</label>
            <input type="text" id="urm" name="urm" placeholder="Payment" required>
            
            <button class="mb-1" type="submit" id="submitButton">Submit</button>
            <button id="closeButton">Close</button>
        </div>
      </form>
    </div>
    <div class="col-lg-12 col-m-12 col-sm-12 d-flex align-items-stretch">
      <div class="card w-100">
        <div class="card-body p-4">
          <h5 class="card-title fw-semibold mb-4">Price List</h5>
          <input type="text" onkeyup="myFunction()" class="float-end" name="search" id="search" placeholder="Search">
          <div class="table-responsive">
            <table class="table text-nowrap col-sm-12 mb-0 align-middle" id="myTable">
              <thead class="text-dark fs-4">
                <tr>
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">No</h6>
                  </th>
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">Name</h6>
                  </th>
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">Unit</h6>
                  </th>
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">Currency</h6>
                  </th>
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">Price</h6>
                  </th>
                  <th class="border-bottom-0">
                    <h6 class="fw-semibold mb-0">Action</h6>
                  </th>

                </tr>
              </thead>
              <tbody id="dt">
                <% var b=0 %>
                  <% pro.forEach(function(p){%>
                    <tr>

                      <td class="border-bottom-0">
                        <h6 class="fw-semibold mb-0">
                          <%= b+=1 %>
                        </h6>
                      </td>

                      <td hidden class="border-bottom-0">
                        <h6 class="fw-semibold mb-1">
                          <%=p._id %>
                        </h6>

                      </td>
                      <td  class="border-bottom-0">
                        <h6 class="fw-semibold mb-1">
                          <%=p.item %>
                        </h6>

                      </td>
                      
                      <td class="border-bottom-0">
                        <% un.forEach(function(u){%>
                          <% if(p.item===u.item){%>
                            <h6 class="fw-semibold mb-1">
                              <%=u.unit %>
                            </h6>
                            <%}%>


                              <%})%>


                      </td>
                      <td  class="border-bottom-0">
                        <h6 class="fw-semibold mb-1">
                          <%=p.currency %>
                        </h6>

                      </td>
                      <td  class="border-bottom-0">
                        <h6 class="fw-semibold mb-1">
                          <%=p.price %>
                        </h6>

                      </td>

                      <td class="border-bottom-0">
                        <a id="openFormButton" class="btn del btn-success btn-sm"
                          >
                          <i class="ti ti-edit ict"></i></a>
                          
                      </td>

                    </tr>
                    <% })%>

              </tbody>
            </table>
          </div>
          <div class="pagination" id="pagination-controls">
            <button id="prev" onclick="changePage(-1)">Previous</button>
            <!-- Page numbers will be generated here -->
            <button id="next" onclick="changePage(1)">Next</button>
        </div>
        </div>
      </div>
    </div>
  </div>
  <script>
    const modalForm = document.getElementById('modalForm');
          const openFormButton = document.getElementById('openFormButton');
          const rem = document.getElementById('ur');
          const pd = document.getElementById('sc');
          
          function openModal(rem,bill,pad) {
              ur.value = rem; // Populate name input
              urm.value = bill;
              pd.value = pad;
              modalForm.style.display = 'flex'; // Show modal
          }
          document.querySelectorAll('.del').forEach(button => {
              button.addEventListener('click', (event) => {
                  const row = event.target.closest('tr'); // Get the closest row
                  const rem = row.cells[2].innerText; // Get name from first cell
                  const bill = row.cells[5].innerText;
                  const pd = row.cells[4].innerText;
                  openModal(rem,bill,pd); // Open modal with data
              });
          });
          openFormButton.addEventListener('click', () => {
              modalForm.style.display = 'flex'; // Show the modal
          });
  
          // Handle form submission
          document.getElementById('submitButton').addEventListener('click', () => {
              // You can handle form data here
              
              modalForm.style.display = 'none'; // Hide the modal after submission
          });
  
          // Handle close button
          document.getElementById('closeButton').addEventListener('click', () => {
              modalForm.style.display = 'none'; // Hide the modal
          });
          const rowsPerPage = 30; // Number of rows per page
    let currentPage = 1;

    function displayTable(page) {
        const rows = document.querySelectorAll("#myTable tbody tr");
        const totalRows = rows.length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);
        
        // Calculate start and end indices for current page
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;

        // Hide all rows and only show the selected page's rows
        rows.forEach((row, index) => {
            row.style.display = (index >= start && index < end) ? '' : 'none';
        });

        // Update row count

        // Enable/disable Previous and Next buttons
        document.getElementById("prev").disabled = page === 1;
        document.getElementById("next").disabled = page === totalPages;

        // Generate page numbers
        generatePaginationControls(totalPages, page);
    }

    function generatePaginationControls(totalPages, activePage) {
        const paginationControls = document.getElementById("pagination-controls");

        // Clear previous page numbers
        const pageNumbers = paginationControls.querySelectorAll("span");
        pageNumbers.forEach(span => span.remove());

        // Determine the range of page numbers to display
        const maxPageNumbers = 10; // Maximum number of page numbers to display
        let startPage, endPage;

        if (totalPages <= maxPageNumbers) {
            // If total pages are less than or equal to max, show all
            startPage = 1;
            endPage = totalPages;
        } else {
            // Calculate start and end page numbers to show
            startPage = Math.max(1, activePage - Math.floor(maxPageNumbers / 2));
            endPage = Math.min(totalPages, startPage + maxPageNumbers - 1);

            // Adjust startPage if endPage exceeds totalPages
            if (endPage === totalPages) {
                startPage = Math.max(1, totalPages - maxPageNumbers + 1);
            }
        }

        // Generate page numbers
        for (let i = startPage; i <= endPage; i++) {
            const span = document.createElement("span");
            span.textContent = i;
            span.className = (i === activePage) ? 'active' : '';
            span.onclick = () => displayTable(i);
            paginationControls.insertBefore(span, document.getElementById("next"));
        }
    }

    function changePage(direction) {
        const totalRows = document.querySelectorAll("#myTable tbody tr").length;
        const totalPages = Math.ceil(totalRows / rowsPerPage);
        currentPage += direction;

        // Ensure currentPage stays within bounds
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        displayTable(currentPage);
    }

    // Initial display
    displayTable(currentPage);
  </script>
  <%-include('footer')%>